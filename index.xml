<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://yichixing.github.io/hugo-Fixlt-dev/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Feb 2025 20:14:22 +0800</lastBuildDate>
    <atom:link href="https://yichixing.github.io/hugo-Fixlt-dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI客户端如何解析github项目</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E6%9E%90github%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E6%9E%90github%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;[让AI解析github项目]&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;《1 直接把项目克隆下来，然后用AI客户端打开即可，反正项目说明README.md是markdown，图片什么的都有，再复杂的项目AI都能用README.md解析》&#xA;&#xA;&amp;lt;2 使用github MCP解析自己克隆下来的仓库&amp;gt;&#xA;&#xA;&amp;lt;3 给AI客户端添加URL文档集 直接把github项目地址作为文档集数据&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>AI客户端添加项目文档</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;p&gt;[让AI解析github项目]&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;1 给AI客户端添加URL文档集 直接把项目文档的地址作为文档集数据》&#xA;&#xA;&amp;lt;2 把在线项目文档的网页crlt+s保存下来后加入到当前项目&amp;gt;&#xA;&#xA;&amp;lt;3 使用联网 MCP服务 然后AI客户端联网去解析在线项目文档&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>github page部署hugo博客</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h1 id=&#34;part1-创建新的-github-仓库&#34;&gt;part1: 创建新的 GitHub 仓库&lt;/h1&gt;&#xA;&lt;p&gt;(00:04-00:23) &lt;em&gt;&lt;strong&gt;1.1: 推荐仓库命名&lt;/strong&gt;&lt;/em&gt;&#xA;对于&lt;strong&gt;首次部署博客&lt;/strong&gt;的用户，视频&lt;strong&gt;推荐&lt;/strong&gt;将 GitHub &lt;strong&gt;仓库名称&lt;/strong&gt;设置为 &lt;code&gt;**用户名.github.io**&lt;/code&gt; 的格式。视频中演示了输入 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 作为示例。&lt;/p&gt;&#xA;&lt;p&gt;(00:23-00:30) &lt;em&gt;&lt;strong&gt;1.2: 处理命名冲突&lt;/strong&gt;&lt;/em&gt;&#xA;视频指出 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 这个特定名称在其账户下&lt;strong&gt;已被占用&lt;/strong&gt;，因为它已被用于&lt;strong&gt;部署&lt;/strong&gt;另一个项目（提及了 &lt;strong&gt;Hexo&lt;/strong&gt;，但后续操作基于 &lt;strong&gt;Hugo&lt;/strong&gt;）。&lt;/p&gt;&#xA;&lt;h1 id=&#34;part2-理解-github-pages-的-url-结构&#34;&gt;part2: 理解 GitHub Pages 的 URL 结构&lt;/h1&gt;&#xA;&lt;p&gt;(00:30-00:47) &lt;em&gt;&lt;strong&gt;2.1: &lt;code&gt;用户名.github.io&lt;/code&gt; 仓库的 URL&lt;/strong&gt;&lt;/em&gt;&#xA;视频展示了名为 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 是&lt;strong&gt;根域名&lt;/strong&gt; &lt;code&gt;**https://letere-gg.github.io**&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;(00:48-01:02) &lt;em&gt;&lt;strong&gt;2.2: 普通仓库的 URL&lt;/strong&gt;&lt;/em&gt;&#xA;视频接着展示了另一个名为 &lt;code&gt;**hugo-stack**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 带有&lt;strong&gt;仓库名称作为子路径&lt;/strong&gt;，即 &lt;code&gt;**https://letere-gg.github.io/hugo-stack**&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;(01:02-01:18) &lt;em&gt;&lt;strong&gt;2.3: 部署建议&lt;/strong&gt;&lt;/em&gt;&#xA;基于以上对比，视频&lt;strong&gt;建议首次部署时使用 &lt;code&gt;用户名.github.io&lt;/code&gt; 格式命名仓库&lt;/strong&gt;，这样生成的网站 URL &lt;strong&gt;不带子路径&lt;/strong&gt;，可以&lt;strong&gt;避免一些潜在的 bug&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>hugo博客action代码部署：action代码解析</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/action-%E4%BB%A3%E7%A0%81%E6%88%91%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%8D%E6%9D%A5%E7%9A%84%E4%B8%8D%E7%94%A8ai%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81steps%E5%AD%97%E6%AE%B5%E4%B8%8B%E7%9A%84users%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/action-%E4%BB%A3%E7%A0%81%E6%88%91%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%8D%E6%9D%A5%E7%9A%84%E4%B8%8D%E7%94%A8ai%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81steps%E5%AD%97%E6%AE%B5%E4%B8%8B%E7%9A%84users%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;hugo博客的action代码解析用aciton配置hugo博客的action代码&#34;&gt;Hugo博客的action代码：解析用aciton配置hugo博客的action代码&lt;/h1&gt;&#xA;&lt;p&gt;好的，这是视频中展示的、由社区贡献者 (peaceiris) 维护的用于通过 GitHub Actions 部署 Hugo 站点的 Actions 工作流 YAML 代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 工作流名称&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 触发工作流的事件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 仅在 main 分支被推送时触发&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义工作流中的作业&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义一个名为 deploy 的作业&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 指定作业运行的环境为最新的 Ubuntu 系统&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 定义作业中的步骤&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤1：检出代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用官方的 actions/checkout 动作来获取仓库代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 获取完整的 Git 历史记录（对于部署工具 peaceiris/actions-gh-pages 可能需要）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 0 表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤2：设置 Hugo 环境&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup Hugo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用社区维护的 peaceiris/actions-hugo 动作来安装 Hugo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-hugo@v3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定要安装的 Hugo 版本为最新版&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 明确指定安装 Hugo 的 Extended 版本（支持 SASS/SCSS 等特性）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;extended&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤3：构建网站&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 运行 Hugo 命令来生成静态网站文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# -D 参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo -D&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤4：部署网站到 GitHub Pages&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用社区维护的 peaceiris/actions-gh-pages 动作来部署&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定用于认证的 Personal Access Token (PAT)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# ${{ secrets.TOKEN }} 会从仓库的 Secrets 中读取名为 TOKEN 的值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# （视频中占位符是 你的token变量名，这里假设你设置为 TOKEN）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.TOKEN }}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定要将静态文件部署到的目标仓库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# （视频中占位符是 你的github名/你的仓库名，这里假设目标仓库是 letere-gz/hugo-dev）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letere-gz/hugo-dev&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定将静态文件推送到目标仓库的哪个分支（通常是 gh-pages 或 main）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定包含构建好的静态网站文件的目录（Hugo 默认生成到 public）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_DIR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 自定义部署时 Git 提交的信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;commit_message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;auto deploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码解释 (遵循托勒斯法则/Law of Demeter - 关注“做什么”而非“怎么做”的内部细节):&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>hugo博客action代码部署：hugo博客的action代码本体</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/hugo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E7%9A%84action%E4%BB%A3%E7%A0%81%E6%9C%AC%E8%BA%AB/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/hugo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E7%9A%84action%E4%BB%A3%E7%A0%81%E6%9C%AC%E8%BA%AB/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 工作流名称&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 触发工作流的事件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 仅在 main 分支被推送时触发&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义工作流中的作业&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义一个名为 deploy 的作业&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 指定作业运行的环境为最新的 Ubuntu 系统&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 定义作业中的步骤&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤1：检出代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用官方的 actions/checkout 动作来获取仓库代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 获取完整的 Git 历史记录（对于部署工具 peaceiris/actions-gh-pages 可能需要）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 0 表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤2：设置 Hugo 环境&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup Hugo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用社区维护的 peaceiris/actions-hugo 动作来安装 Hugo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-hugo@v3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定要安装的 Hugo 版本为最新版&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 明确指定安装 Hugo 的 Extended 版本（支持 SASS/SCSS 等特性）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;extended&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤3：构建网站&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 运行 Hugo 命令来生成静态网站文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# -D 参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo -D&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 步骤4：部署网站到 GitHub Pages&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用社区维护的 peaceiris/actions-gh-pages 动作来部署&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定用于认证的 Personal Access Token (PAT)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# ${{ secrets.TOKEN }} 会从仓库的 Secrets 中读取名为 TOKEN 的值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# （视频中占位符是 你的token变量名，这里假设你设置为 TOKEN）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.TOKEN }}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定要将静态文件部署到的目标仓库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# （视频中占位符是 你的github名/你的仓库名，这里假设目标仓库是 letere-gz/hugo-dev）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;letere-gz/hugo-dev&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定将静态文件推送到目标仓库的哪个分支（通常是 gh-pages 或 main）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 指定包含构建好的静态网站文件的目录（Hugo 默认生成到 public）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_DIR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# 自定义部署时 Git 提交的信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;commit_message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;auto deploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>使用github-action自动部署hugo博客到“page”仓库</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;h1 id=&#34;part1-介绍-github-action-自动化部署-hugo-博客&#34;&gt;part1: 介绍 GitHub Action 自动化部署 Hugo 博客&lt;/h1&gt;&#xA;&lt;p&gt;(00:00-00:09) &lt;em&gt;&lt;strong&gt;1.1: 介绍目标&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;视频开篇展示了一个本地运行的 &lt;strong&gt;Hugo&lt;/strong&gt; 博客 (&lt;code&gt;localhost:1313&lt;/code&gt;)。&lt;/li&gt;&#xA;&lt;li&gt;目标是向大家介绍如何通过 &lt;strong&gt;GitHub&lt;/strong&gt; 的 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 功能来&lt;strong&gt;自动部署&lt;/strong&gt;博客。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(00:09-00:32) &lt;em&gt;&lt;strong&gt;1.2: 手动部署痛点与自动化优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;♈指出传统方式下，每次修改完文件后，都需要&lt;strong&gt;手动将生成&lt;/strong&gt;的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;strong&gt;上传&lt;/strong&gt;到服务器或托管平台，这个过程比较&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;♈使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 可以实现&lt;strong&gt;自动化&lt;/strong&gt;：&lt;strong&gt;自动&lt;/strong&gt;帮我们&lt;strong&gt;生成&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt; 目录，并将其&lt;strong&gt;部署&lt;/strong&gt;到&lt;strong&gt;静态页面网站&lt;/strong&gt;（如 GitHub Pages）。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：只需&lt;strong&gt;提交代码&lt;/strong&gt; (&lt;code&gt;git push&lt;/code&gt;)，后续的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;部署&lt;/strong&gt;过程就能&lt;strong&gt;自动完成&lt;/strong&gt;，&lt;strong&gt;方便&lt;/strong&gt;很多。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;part2-创建-github-仓库并推送-hugo-源码&#34;&gt;part2: 创建 GitHub 仓库并推送 Hugo 源码&lt;/h1&gt;&#xA;&lt;p&gt;(00:32-00:41) &lt;em&gt;&lt;strong&gt;2.1: 创建仓库准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要实现自动化部署，首先需要一个 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;来存放 &lt;strong&gt;Hugo&lt;/strong&gt; 项目的&lt;strong&gt;主文件&lt;/strong&gt;（源代码）。&lt;/li&gt;&#xA;&lt;li&gt;操作：导航到 &lt;strong&gt;GitHub&lt;/strong&gt; 网站，准备&lt;strong&gt;创建&lt;/strong&gt;一个新的仓库。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(00:41-01:12) &lt;em&gt;&lt;strong&gt;2.2: 创建私有仓库&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在 GitHub 创建新仓库页面（经历短暂的网络卡顿后），设置仓库信息：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仓库名：&lt;code&gt;hugo-main&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;可见性：&lt;strong&gt;建议&lt;/strong&gt;选择&lt;strong&gt;私有（Private）&lt;/strong&gt;，因为源代码一般不需要公开。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;操作：点击 &lt;code&gt;Create repository&lt;/code&gt; 完成创建。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(01:12-01:24) &lt;em&gt;&lt;strong&gt;2.3: 上传文件准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仓库创建完成后，需要将本地的 &lt;strong&gt;Hugo&lt;/strong&gt; 项目文件&lt;strong&gt;上传&lt;/strong&gt;到这个新仓库。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关键点&lt;/strong&gt;：上传前需要注意&lt;strong&gt;忽略&lt;/strong&gt;掉一些不需要版本控制的文件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(01:24-02:04) &lt;em&gt;&lt;strong&gt;2.4: 配置 .gitignore 忽略生成文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>搭建本地hugo博客</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/hugo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h1 id=&#34;part1-hugo--github-免费部署自己的博客介绍&#34;&gt;part1: Hugo + GitHub 免费部署自己的博客介绍&lt;/h1&gt;&#xA;&lt;p&gt;(00:00-00:15) &lt;em&gt;&lt;strong&gt;1.1: 视频目标与演示&lt;/strong&gt;&lt;/em&gt;&#xA;视频旨在分享如何使用 &lt;strong&gt;Hugo&lt;/strong&gt; 和 &lt;strong&gt;GitHub&lt;/strong&gt; &lt;strong&gt;免费部署&lt;/strong&gt;一个属于自己的&lt;strong&gt;个人博客&lt;/strong&gt;。开头展示了作者已经&lt;strong&gt;部署成功&lt;/strong&gt;的博客页面作为最终效果预览。&lt;/p&gt;&#xA;&lt;p&gt;(00:15-00:37) &lt;em&gt;&lt;strong&gt;1.2: 作者说明与目的&lt;/strong&gt;&lt;/em&gt;&#xA;作者声明自己并非专业的教学视频制作者，制作此视频主要是因为近期想更新内容，且正好在研究 &lt;strong&gt;Hugo&lt;/strong&gt; 博客的搭建过程。目的是分享经验，帮助观看者在搭建过程中&lt;strong&gt;少走弯路&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;(00:37-00:44) &lt;em&gt;&lt;strong&gt;1.3: 博客内容示例&lt;/strong&gt;&lt;/em&gt;&#xA;简要展示了博客中的一篇文章，内容即为本次视频所要讲解的 &lt;strong&gt;Hugo + GitHub 免费部署博客&lt;/strong&gt;的&lt;strong&gt;教程记录&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h1 id=&#34;part2-搭建动机与-hugo-vs-hexo-对比&#34;&gt;part2: 搭建动机与 Hugo vs Hexo 对比&lt;/h1&gt;&#xA;&lt;p&gt;(00:45-00:57) &lt;em&gt;&lt;strong&gt;2.1: 历史背景 (Hexo)&lt;/strong&gt;&lt;/em&gt;&#xA;作者提到自己之前已经使用 &lt;strong&gt;Hexo&lt;/strong&gt; 框架搭建过一个&lt;strong&gt;个人博客&lt;/strong&gt; (展示了之前的 Hexo 博客页面)。&lt;/p&gt;&#xA;&lt;p&gt;(00:57-01:19) &lt;em&gt;&lt;strong&gt;2.2: 转向 Hugo 的原因&lt;/strong&gt;&lt;/em&gt;&#xA;解释了为何选择使用 &lt;strong&gt;Hugo&lt;/strong&gt; 重新搭建：更换了新电脑 (&lt;strong&gt;天选4&lt;/strong&gt;) 后，之前的 &lt;strong&gt;Hexo&lt;/strong&gt; 本地文件丢失（因为&lt;strong&gt;没有上传备份到 GitHub&lt;/strong&gt;），所以需要重新搭建。借此机会研究并尝试了 &lt;strong&gt;Hugo&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;(01:19-01:30) &lt;em&gt;&lt;strong&gt;2.3: Hugo 使用体验&lt;/strong&gt;&lt;/em&gt;&#xA;作者认为实际使用下来，&lt;strong&gt;Hugo&lt;/strong&gt; &lt;strong&gt;感觉&lt;/strong&gt;比 &lt;strong&gt;Hexo&lt;/strong&gt; &lt;strong&gt;更方便&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;(01:30-01:41) &lt;em&gt;&lt;strong&gt;2.4: 对新手的建议 (Hugo vs Hexo)&lt;/strong&gt;&lt;/em&gt;&#xA;指出 &lt;strong&gt;Hugo&lt;/strong&gt; 的官方文档&lt;strong&gt;基本都是英文&lt;/strong&gt;，可能对新手不太友好。因此，&lt;strong&gt;推荐新手&lt;/strong&gt;优先尝试 &lt;strong&gt;Hexo&lt;/strong&gt; (文档相对更完善，中文资源多)。使用 Hugo 需要&lt;strong&gt;啃英文文档&lt;/strong&gt;，对新手来说较为&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>环境变量只有在项目的构建的过程中使用</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84baseurl/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84baseurl/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Cloudflare Pages 连接到 hugo-Fixlt-dev 仓库时，♈Cloudflare Pages 默认是直接托管该仓库中的 静态文件 ，♈它 不会 重新运行 hugo 构建命令。&lt;/p&gt;&#xA;&lt;p&gt;因此，♈你在 Cloudflare Pages 设置的环境变量 HUGO_BASEURL 在这个流程中 根本没有机会 被 Hugo 构建过程使用，因为它是在 Action（ hugo-main 仓库中）构建完成 之后 才接触到这些文件的。♈静态文件一旦生成，里面的绝对 URL 就已经固定了&lt;/p&gt;&#xA;&lt;p&gt;比如，♈GitHub Action 在构建时使用了固定的 baseURL （例如 GitHub Pages 的 URL），生成的 HTML/CSS/JS 文件中的链接都是指向这个 URL 的绝对路径。&lt;/p&gt;&#xA;&lt;p&gt;因此当 Cloudflare Pages 直接提供这些预先构建好的文件时，这些绝对路径对于 Cloudflare 的域名来说是错误的，导致资源加载失败&lt;/p&gt;</description>
    </item>
    <item>
      <title>用AI独立开发MCP服务 集合</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp-%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/ai/ai%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp-%E9%9B%86%E5%90%88/</guid>
      <description>&lt;h1 id=&#34;用ai独立开发mcp服务的集合&#34;&gt;用AI独立开发MCP服务的集合&lt;/h1&gt;&#xA;&lt;p&gt;生成MCP服务 生成调用本地项目的MCP服务  httpsaistudio.google.comprompts1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#x9;[1 如何AI编程开发MCP]&#xA;&#x9;&#x9;用AI开发MCP服务 这里用对应的提示词让AI客户端生成满足自己需求的本地MCP服务代码&#xA;&#x9;&#x9;（markdown格式 、简单描述MCP服务要实现的功能 、 告诉AI 本地项目的路径、 告诉AI 要激活哪个虚拟环境、 告诉AI要设置的 模型的key）、&#xA;&#x9;&#x9;（把本地项目的全部代码直接告诉AI、告诉AI 项目运行后的响应情况 也就是直接把终端的完整内容复制给AI，这个终端的完整内容包含程序的运行命令和项目运行效果）&#xA;&#x9;&#x9;（  给AI详细的MCP文档（告诉AI MCP是什么） 、 应该可以让AI生成MCP的标准配置标准配置的对应的字段和参数我还是了解的 ）&#xA;&#x9;【2 案例  创建MCP服务TimeServer的提示词】&#x9; httpsaistudio.google.comprompts1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&#xA;&#x9;&#x9;提示词里面需要MCP的哪些参考资料，这里给了链接，直接在链接里面粘贴内容过来&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>github action：0 action部署hugo项目的aciton程序 最基本原理</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actionaction%E9%83%A8%E7%BD%B2hugo%E9%A1%B9%E7%9B%AE%E7%9A%84aciton%E7%A8%8B%E5%BA%8F-%E6%9C%80%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 20 Feb 2024 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actionaction%E9%83%A8%E7%BD%B2hugo%E9%A1%B9%E7%9B%AE%E7%9A%84aciton%E7%A8%8B%E5%BA%8F-%E6%9C%80%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;pre&gt;&lt;code&gt;&#x9;[action部署hugo项目的aciton程序]&#xA;&#x9;&#x9;&amp;lt;action部署hugo项目的aciton程序的核心：让action使用hugo命令，action环境需要hugo命令执行hugo博客&amp;gt;&#xA;&#x9;&#x9;&amp;lt;1 有参考作用的使用uses参数的action程序的写法（参考如何让AI写action程序）&amp;gt;&#xA;&#x9;&#x9;&amp;lt;2 有参考作用的使用run字段的action程序的写法 https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P（参考如何让AI写action程序）&amp;gt;&#xA;&#xA;&#x9;[[[[在action环境安装项目包（hugo包）的两种做法（参考如何让AI写action程序）]&#xA;&#x9;&#x9;《1 uses 关键字并指定一个像 别大大佬些好的aciton 比如peaceiris/actions-hugo@v3 这样的“动作 (Action)”时，你是在委托这个预先打包好的工具去完成安装和配置 Hugo 的任务》&#xA;&#x9;&#x9;《2 直接用run字段亲自告诉那个临时的 Linux 系统具体怎么做才能把 Hugo 装好》&#xA;&#xA;&#xA;&#x9;[aciton想部署hugo的核心就是用别人预先写好的东西]&#xA;&#x9;&#x9;《hugo官方有提供官方action动作把仓库代码下载（检出） 到当前的虚拟运行环境中，它就是actions/checkout@v4，通过uses: actions/checkout@v4: 就能使用一个预先写好的、官方提供的“动作” (Action)》&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>github action：2 github action部署项目原理：github action是将项目部署到其它仓库，不是部署到自己的仓库</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actiongithub-action%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8E%9F%E7%90%86github-action%E6%98%AF%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E5%AE%83%E4%BB%93%E5%BA%93%E4%B8%8D%E6%98%AF%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actiongithub-action%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8E%9F%E7%90%86github-action%E6%98%AF%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E5%AE%83%E4%BB%93%E5%BA%93%E4%B8%8D%E6%98%AF%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;p&gt;(08:41-10:19) &lt;em&gt;&lt;strong&gt;4.4: 配置 Repository Secret&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;♈ &lt;strong&gt;目的&lt;/strong&gt;：将生成的 Token 安全地提供给 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 使用。&lt;strong&gt;不应该&lt;/strong&gt;直接将 Token 字符串写入 YAML 文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：回到♎♐&lt;strong&gt;存放 Hugo 源代码&lt;/strong&gt;的仓库（即 &lt;code&gt;hugo-main&lt;/code&gt;），进入该仓库的 &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单 &lt;code&gt;Security&lt;/code&gt; 下的 &lt;code&gt;Secrets and variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Actions&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;New repository secret&lt;/code&gt; 按钮。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;配置 Secret&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;：输入 &lt;strong&gt;Secret 的名称&lt;/strong&gt;。这个名称&lt;strong&gt;必须&lt;/strong&gt;与 workflow YAML 文件中 &lt;code&gt;secrets.&lt;/code&gt; 后面引用的名称&lt;strong&gt;完全一致&lt;/strong&gt;。作者在这里将其命名为 &lt;code&gt;TOKEN&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Secret&lt;/code&gt;：将刚才&lt;strong&gt;复制并保存&lt;/strong&gt;的&lt;strong&gt;完整 Token 字符串&lt;/strong&gt;粘贴到这里。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保存&lt;/strong&gt;：点击 &lt;code&gt;Add secret&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：使用 &lt;strong&gt;Secrets&lt;/strong&gt; 可以&lt;strong&gt;隐藏&lt;/strong&gt;敏感信息，workflow 运行时会安全地注入该值，比硬编码在代码中&lt;strong&gt;安全&lt;/strong&gt;得多&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[[[[[使用aciton后将分源代码仓库和静态页面仓库 ]https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P&#xA;《《《hugo-main 仓库 (源代码仓库)，专门用来提交项目源码的仓库，以及用来运行action的仓库，不需要开启github page的功能，所以hugo-main仓库不需要公开，也不需要把静态资源上传到这仓库上》&#xA;《《《hugo-dev 仓库 (部署目标/静态页面仓库)，hugo-main运行action后生成的静态资源文件所推送到的仓库，是存放最终网站文件并对外提供访问的地方，它是自动化流程的终点/发布目标，因此我们在仓库开启github page功能》&#xA;《《《aciton中的参数 EXTERNAL_REPOSITORY: letere-gz/hugo-dev 就是用来 明确指定了main仓库部署的目标是这个dev仓库。》&lt;/p&gt;</description>
    </item>
    <item>
      <title>github action：2 用github action把源码仓库部署项目到github page仓库的真正意义</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-action%E7%94%A8github-action%E6%8A%8A%E6%BA%90%E7%A0%81%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github-page%E4%BB%93%E5%BA%93%E7%9A%84%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-action%E7%94%A8github-action%E6%8A%8A%E6%BA%90%E7%A0%81%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github-page%E4%BB%93%E5%BA%93%E7%9A%84%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89/</guid>
      <description>&lt;p&gt;(00:09-00:32) &lt;em&gt;&lt;strong&gt;1.2: 手动部署痛点与自动化优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;♈指出传统方式下，每次修改完文件后，都需要&lt;strong&gt;手动将生成&lt;/strong&gt;的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;strong&gt;上传&lt;/strong&gt;到服务器或托管平台，这个过程比较&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;♈使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 可以实现&lt;strong&gt;自动化&lt;/strong&gt;：&lt;strong&gt;自动&lt;/strong&gt;帮我们&lt;strong&gt;生成&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt; 目录，并将其&lt;strong&gt;部署&lt;/strong&gt;到&lt;strong&gt;静态页面网站&lt;/strong&gt;（如 GitHub Pages）。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：只需&lt;strong&gt;提交代码&lt;/strong&gt; (&lt;code&gt;git push&lt;/code&gt;)，后续的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;部署&lt;/strong&gt;过程就能&lt;strong&gt;自动完成&lt;/strong&gt;，&lt;strong&gt;方便&lt;/strong&gt;很多。x x &amp;lt;-https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P&#xA;《《《♐可以源码仓库和静态资源仓库分开；因为源码仓库很重要，每次项目回溯时回溯源码仓库的代码才有意义，回溯静态资源仓库的代码没意义，这意味着未来版本控制就必须要push推送源码仓库，♓但要推送源码仓库就意味着每次推送都要同时push推送源码仓库和静态资源仓库，手动维护两个独立的 Git，需再手动进行第二次推送 流程退冗余了；♐而有了action部署静态资源后，每次只需要推送最重要的源码仓库，无需做冗余的推送静态资源仓库的步骤，无需再手动进行第二次推送&amp;gt;&#xA;《♓我觉得最主要作用是源码静态资源仓库和源代码仓库分开；♐其实不要action也行，不要action就不去推送源代码仓库了，在本地只推送public静态资源即可，反正都是推送步骤不会减少&#xA;《《♐用action把部署静态资源到github page的真正价值：多人协作，多人协作时，需要所有人都遵循同样的流程，但很是有人知道我们要推送的是public静态资源，不是源码，这就导致源码把静态资源给污染了（目录混入源代码仓库会极大地污染 Git 历史）》&#xA;&amp;lt;设置好 Action 后，你甚至可以通过 GitHub 网页界面直接编辑 Markdown 文件并提交，Action 照样能完成部署，你此时甚至不需要本地安装 Hugo；因此未来你更换了本地开发机器，构建环境都是一致的，每次 Action 运行时，都是用同一个版本、同一种配置的 Hugo 工具在同一种操作系统环境下进行构建，结果更可控&amp;gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>github action：3 AI编写action程序技巧</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actionai%E7%BC%96%E5%86%99action%E7%A8%8B%E5%BA%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github-actionai%E7%BC%96%E5%86%99action%E7%A8%8B%E5%BA%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;github aciton配置文件如何创建&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#x9;(2 action配置文件用aciton模板的配置文件， action模板配置文件扔给AI，说明需要这个action模板运行哪个脚本，让AI修改即可，因为有些时候 AI直接生成的action配置文件aciton根本运行不了)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>github配置：1 使用.gitignore的意义</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8.gitignore%E7%9A%84%E6%84%8F%E4%B9%89/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8.gitignore%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
      <description>&lt;p&gt;(01:24-02:04) &lt;em&gt;&lt;strong&gt;2.4: 配置 .gitignore 忽略生成文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 项目中的某些文件/目录是&lt;strong&gt;自动生成的&lt;/strong&gt;，&lt;strong&gt;不应该&lt;/strong&gt;提交到源代码仓库，包括：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 生成的静态网站文件目录。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;resources/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 处理后的资源缓存目录。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;hugo.build.lock&lt;/code&gt;：构建锁文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;hugo.exe&lt;/code&gt;：（如果在 Windows 下）&lt;strong&gt;Hugo&lt;/strong&gt; 可执行文件本身。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;♈ &lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt;一个名为 &lt;code&gt;.gitignore&lt;/code&gt; 的文件。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：编辑 &lt;code&gt;.gitignore&lt;/code&gt; 文件，将上述需要忽略的文件名或目录名（如 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, &lt;code&gt;hugo.build.lock&lt;/code&gt;, &lt;code&gt;hugo.exe&lt;/code&gt;）添加进去，每行一个。&lt;/li&gt;&#xA;&lt;li&gt;♈&lt;strong&gt;目的&lt;/strong&gt;：&lt;strong&gt;保证&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt; 的是&lt;strong&gt;最干净、最原始&lt;/strong&gt;的 Hugo 项目文件。&#xA;《♓目的就是不要让静态资源污染源码，因为hugo-main是源代码仓库，源代码仓库不负责展示github page，只负责运行action得到静态资源给其它部署仓库hugo-dev，所以没必要把多余的静态资源上传到hugo-main，反正在hugo-main展示这些静态资源》&#xA;&amp;lt;git add .：添加所有文件到暂存区（♎.gitignore 会生效，忽略指定文件）。&amp;gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>github配置：2 github pull 与 github push，pull对分支后才能用push</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github%E9%85%8D%E7%BD%AE-github-pull-%E4%B8%8E-github-pushpull%E5%AF%B9%E5%88%86%E6%94%AF%E5%90%8E%E6%89%8D%E8%83%BD%E7%94%A8push/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/%E9%A1%B9%E7%9B%AE/github%E9%87%8D%E8%A6%81%E8%AE%A4%E7%9F%A5/github%E9%85%8D%E7%BD%AE-github-pull-%E4%B8%8E-github-pushpull%E5%AF%B9%E5%88%86%E6%94%AF%E5%90%8E%E6%89%8D%E8%83%BD%E7%94%A8push/</guid>
      <description>&lt;p&gt;[0 检查当前分支的跟踪关系]&#xA;&amp;lt;命令：git status；因为如果追踪错误，那么我想要push推送到我想要的分支很可能失败，因为追踪错误的缘故，pull的是其它的分支，因此我想要的分支就没法push了&amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;[1 取消本地 main 分支对 所有分支 的跟踪]&#xA;&amp;lt;命令：git branch &amp;ndash;unset-upstream&amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;[[[[2 指定pull拉取main的分支（为了push到main，只能强制指定要拉取main分支）]&#xA;《命令：git pull origin main》&lt;/p&gt;&#xA;&lt;p&gt;[[[[3 pull拉取了main分支后 就能push推送到main分支了]&#xA;&amp;lt;命令：git push -u origin main&amp;gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>https://yichixing.github.io/hugo-Fixlt-dev/posts/first_post/</link>
      <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
      <guid>https://yichixing.github.io/hugo-Fixlt-dev/posts/first_post/</guid>
      <description>&lt;p&gt;A blog (a truncation of &amp;ldquo;weblog&amp;rdquo;) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, &amp;ldquo;multi-author blogs&amp;rdquo; (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other &amp;ldquo;microblogging&amp;rdquo; systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
